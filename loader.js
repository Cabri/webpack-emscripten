const {execFileSync} = require('child_process');
const {join} = require('path');
const {unlinkSync, writeFileSync, readFileSync} = require('fs');
const {edit} = require("@webassemblyjs/wasm-edit");
const t = require("@webassemblyjs/ast");

const cwd = process.cwd();
const emcc = join(cwd, "emsdk", "emscripten", "1.38.1", "emcc");

function transformWasm(bin) {
  return edit(bin, {
    Elem({node}) {
      const offset = t.objectInstruction("const", "i32", [
        t.numberLiteralFromRaw(0)
      ]);

      node.offset = [offset];
    },

    ModuleImport({node}) {

      // Webpack only allows memory and table imports from another wasm
      if (node.name === "memory" || node.name === "table") {
        node.module = "/tmp/hack.wat";
      }

      if (node.module === "env" || node.module === "global") {
        node.module = "/tmp/wasm-loader.js";
      }
    }
  });
}

function readWasm() {
  const b = readFileSync("a.out.wasm", null);
  unlinkSync("a.out.wasm");

  return b;
}

function readLoader() {
  const loader = readFileSync("a.out.js", "utf8");
  unlinkSync("a.out.js");

  return loader;
}

module.exports = function(source) {
  writeFileSync(".tmp.c", source);

  execFileSync(emcc, [
    ".tmp.c",
    // "-O3",
    "-s", "WASM=1",
    "-s", "MODULARIZE=1"
  ]);

  const bin = transformWasm(readWasm());

  writeFileSync("/tmp/module.wasm", new Buffer(bin));
  writeFileSync("/tmp/loader.js", readLoader());

  /**
   * Memory and table being imported by the wasm module
   */
  const hackWat = `
    (module
      (memory (export "memory") 256 256)
      (table (export "table") 10 10 anyfunc)
    )
  `;

  writeFileSync("/tmp/hack.wat", hackWat);

  /**
   * Loader being imported by the wasm module
   */
  const wasmWrapperLoader = `

    /**
     * Generated by the loader
     */

    const Module = require("/tmp/loader.js");

    const m = new Module({
      wasmBinary: true,
      instantiateWasm: (info, receiveInstance) => {
        receiveInstance({ exports: true });
        return true;
      }
    });

    module.exports = m.asmLibraryArg;
  `;

  writeFileSync("/tmp/wasm-loader.js", wasmWrapperLoader);

  /**
   * Loader being imported by the user
   */
  const userWrapperLoader = `

    /**
     * Generated by the loader
     */

    import Module from "/tmp/loader.js";
    import * as instanceExports from "/tmp/module.wasm";

    const m = new Module({
      wasmBinary: true,
      instantiateWasm: (info, receiveInstance) => {
        receiveInstance({ exports: instanceExports });
        return instanceExports;
      }
    });

    // generate export statements for each ModuleExport
    export default m;
  `;

  this.callback(null, userWrapperLoader);

  unlinkSync(".tmp.c");
};
